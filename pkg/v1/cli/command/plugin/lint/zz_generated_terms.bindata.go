// Code generated by go-bindata. DO NOT EDIT.
// sources:
// hack/linter/cli-wordlist.yml

package lint

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataHackLinterCliwordlistYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x4d\x8e\xe4\x20\x0c\x85\xf7\x39\x05\x17\xe0\x02\x73\x8e\xd9\x8f\x1c\x70\x88\x55\x8e\x8d\xc0\x54\x75\xdf\x7e\x14\x20\x5d\x3f\xea\x55\x3e\x9e\x6c\xf3\x78\xb1\xf7\x7e\x71\xa2\x4d\xea\x9f\xc5\x39\xef\x20\x04\x6d\x62\x83\xe3\x41\xe2\x6f\x6d\xc5\xa0\xb2\x51\x1a\x62\xce\xe3\xfb\xa8\xfd\x1b\x90\xb2\xcf\x50\x8c\x02\x65\x30\x52\x19\x32\xb7\x6a\x58\x5e\x39\x15\x6d\xa3\x37\xe8\x91\x55\x70\x5e\x13\x0a\x46\x14\x23\xe0\x31\x31\x82\x81\xcf\x45\x0d\xc3\xcf\x38\x92\x4a\x69\x1f\xf5\x1f\x86\xce\x63\x11\x34\xac\xbe\x20\x23\x54\xec\xf2\x01\x61\x27\xc1\x1d\x81\x6d\x0f\x3b\x86\xdb\x94\x05\xd2\x81\x62\xfe\xd5\x61\xc6\x72\x50\xad\xa4\x32\x2c\x64\x6e\x89\xc6\xcd\x59\x99\xc2\xf7\xc0\xa2\x77\x3a\x8b\x66\x57\xc1\xac\x1d\x1e\x5a\x6e\x35\x43\xc0\xc5\xdd\xb1\xac\x57\x94\x77\x20\x86\x95\xd1\xb7\x9c\x0a\x44\x9c\x81\x31\x82\xfc\xc4\xc0\xf8\x8c\xac\x20\xd8\x30\x1f\x91\xd1\xd0\x75\x4e\x38\x9e\x4d\x47\xd6\x32\x51\xe8\x82\x6a\xc0\xdc\x99\xa9\x0e\x91\xf5\xf2\xae\xe3\xc6\x1a\x80\xc7\xdc\xba\xeb\xa3\x43\xcb\xf1\xba\x6b\x9a\xeb\x7c\xc7\x52\xbb\x9d\xc4\xba\x02\xfb\x8d\x21\xf5\xd7\x38\xef\x76\xe4\xec\x06\xb2\xa6\x7f\x1b\xf5\x99\x67\xd3\x72\xbe\xe4\x00\x89\x6f\xf5\x90\xe9\xaf\xde\x50\xc6\x69\x25\x89\x93\x8a\x3e\x6a\x4f\xb0\x47\x20\x86\x5f\x36\x0e\x91\x6a\x8f\xab\x2f\x0a\x49\x7a\x57\x45\x3d\x86\x5d\x87\x88\x12\xb3\x92\xcc\xc6\xa7\x97\x4d\x4b\x98\x98\x42\xf6\x6b\x0b\x37\x34\x2f\x70\xbc\x88\x45\xd5\x7c\x06\xdb\x87\x44\x12\xb8\x45\xf4\xbf\x6d\xc6\xe7\xb6\x39\xef\x9e\xb3\x4e\x9a\x7f\xbd\x87\xbd\x6d\x15\xa7\x21\x6d\x96\xdb\xe4\x8a\xe5\x7e\x0d\x3b\xf3\xf7\xc0\xec\x83\x4a\x24\x9b\xfb\xe6\xbc\x33\x3a\x50\xaf\x8e\x46\xf3\x5b\xd1\xe3\x17\x55\x23\x49\x7e\x55\xb5\x6a\x05\xf2\xbb\xbd\xb7\x9a\xbe\x5a\xed\xa3\xe2\x1b\xeb\xb2\xfc\x0f\x00\x00\xff\xff\xfa\x99\x88\xd9\xe7\x03\x00\x00")

func bindataHackLinterCliwordlistYmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataHackLinterCliwordlistYml,
		"hack/linter/cli-wordlist.yml",
	)
}

func bindataHackLinterCliwordlistYml() (*asset, error) {
	bytes, err := bindataHackLinterCliwordlistYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "hack/linter/cli-wordlist.yml",
		size:        999,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"hack/linter/cli-wordlist.yml": bindataHackLinterCliwordlistYml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"hack": {Func: nil, Children: map[string]*bintree{
		"linter": {Func: nil, Children: map[string]*bintree{
			"cli-wordlist.yml": {Func: bindataHackLinterCliwordlistYml, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
