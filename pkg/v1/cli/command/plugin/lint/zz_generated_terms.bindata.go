// Code generated by go-bindata. DO NOT EDIT.
// sources:
// hack/linter/cli-wordlist.yml

package lint

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataHackLinterCliwordlistYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x52\x51\xb6\xf3\x2c\x08\x7c\xef\x2a\xb2\x01\x37\xf0\xaf\xe3\xdf\x00\x51\x62\x38\x35\xe0\x11\x6c\xef\xdd\xfd\x77\x22\xa6\xbd\xed\x93\xc3\x04\xc6\x71\x42\x08\xe1\xb6\xb0\x74\xd6\xff\x6e\xcb\x12\x16\x88\x51\x3a\x9b\xe3\x74\x10\x87\x7b\x5f\x31\x0a\x6f\x94\x9d\xac\xd5\xcf\xa7\x8e\x33\x22\xd5\x50\xa1\x19\x45\xaa\x60\x24\xec\x74\xe9\x6a\xd8\xfe\xe2\xdc\xa4\xfb\x6c\x94\xa3\x0a\xe3\xbc\x26\x36\x4c\xc8\x46\x50\x5c\x31\x81\x41\xa8\x4d\x0c\xe3\x4b\x8e\x58\x29\xef\xde\xff\x65\xe8\x2c\x1b\xa3\xa1\x86\x86\x05\x41\x71\xd0\x45\x32\xf9\xec\x01\x71\x27\xc6\x1d\xa1\xd8\x1e\x77\x8c\xf7\x49\x33\x64\x3c\x90\x2d\xfc\x35\x5b\xb1\x1d\xa4\x4a\xc2\xee\xa6\x96\x7e\x09\x55\x29\x14\x7f\x1d\x36\x79\xd0\xd9\x34\xa7\x1a\x56\x19\xe0\x29\xed\xae\x15\x22\xde\x96\x07\xb6\xf5\x4a\xf5\x01\x54\x60\x2d\x18\x7a\xcd\x0d\x12\xce\xec\x0a\x02\xbf\x12\x29\xf8\x4e\xaf\x21\x98\xbf\x23\x61\xc1\x17\xd4\xd8\x68\xf5\x22\xa3\xa7\xb1\x63\xf1\x50\xe9\xa8\xd2\x6c\xa6\xb5\xc9\x04\x74\x31\x6a\x50\x8a\x27\x43\xea\xa4\xb8\x0b\x8d\x50\x5c\x53\x77\x79\x0e\xd0\x6b\xba\xee\x9f\x86\x07\x7e\x60\xd3\x61\x31\x17\x59\xa1\x84\xad\x40\x1e\x2f\xf4\xbc\xc3\x46\x43\xe8\xec\xbc\x9d\x4f\x3a\x80\xd3\x47\x13\x54\xfa\x5f\xee\xc8\x5e\xad\xc4\x69\xa2\x26\x4f\x1d\x51\x8e\x2c\xd8\xf0\xc7\xbc\x48\xa4\x23\xb7\xb1\x3c\xc4\xf9\x93\x65\x09\x18\x77\x71\x12\x39\x55\x21\x9e\x83\x6f\x2f\x9b\xb4\xf8\x17\x86\xa8\xd5\xcb\x1c\x6b\x58\x7b\xbc\xa3\x05\x86\x03\xdf\x64\x13\xb1\x50\xc1\x76\xa7\x88\x63\xe9\x09\xc3\x58\x99\xaf\x8d\xf9\x5e\xc8\x25\x2c\x6f\xad\x13\xcd\x6d\x18\x81\x6f\x9b\xe2\xf4\x27\xdd\x6a\x9f\x58\xb1\x3d\x2e\xb1\xf3\x1f\x04\x28\x25\x44\xe1\x44\x36\xf7\xf0\xfc\x60\x90\x5f\x01\xa8\x25\x6c\x2d\x08\x97\x5f\x27\x8c\x0e\x94\x4b\xaf\xd3\x3c\x15\x03\xfe\x90\x1a\x71\x0e\xab\x88\xa9\x35\xa8\x9f\xe6\x3f\x7a\xc6\x42\xf6\xaf\x8e\x5f\xd4\xdb\xed\x5f\x00\x00\x00\xff\xff\x00\x7d\x03\xb8\x28\x04\x00\x00")

func bindataHackLinterCliwordlistYmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataHackLinterCliwordlistYml,
		"hack/linter/cli-wordlist.yml",
	)
}

func bindataHackLinterCliwordlistYml() (*asset, error) {
	bytes, err := bindataHackLinterCliwordlistYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "hack/linter/cli-wordlist.yml",
		size:        1064,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"hack/linter/cli-wordlist.yml": bindataHackLinterCliwordlistYml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"hack": {Func: nil, Children: map[string]*bintree{
		"linter": {Func: nil, Children: map[string]*bintree{
			"cli-wordlist.yml": {Func: bindataHackLinterCliwordlistYml, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
